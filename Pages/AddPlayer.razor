@page "/add-player"
@inject NavigationManager Navigation
@using ShipGameFront

<PageTitle>Connect to Game</PageTitle>

<h1>Connect to Game: @gameCode</h1>

<form method="post" @onsubmit="HandleFormSubmit">
    <label for="playerNameForm">Twoje imię:</label>
    <input type="text" id="playerNameForm" name="playerNameForm" @bind="playerNameForm" />
    @if(selectedPoints.Count == 10){
        <button type="submit" class="btn btn-primary">Stwórz grę !</button>
    }
</form>

<p>Wybeierz statki:</p>

<table class="game-board">
    @for (int row = 1; row < 7; row++)
    {
        int currentRow = row;
        <tr>
            @for (int col = 1; col < 7; col++)
            {
                int currentColumn = col;
                @if(!IsCellSelected(currentRow, currentColumn)){
                    <td>
                        <button class="cell cell-selected" @onclick="() => SelectPoint(currentRow, currentColumn)">@pointAlphabet[currentRow]@currentColumn</button>
                    </td>
                }
                @if(IsCellSelected(currentRow, currentColumn)){
                    <td>
                        <button class="cell" style="background-color: rgb(0, 255, 85);" @onclick="() => RemovePoint(currentRow, currentColumn)">@pointAlphabet[currentRow]@currentColumn</button>
                    </td>
                }
            }
        </tr>
    }
</table>

<style>
    .game-board {
        border-collapse: collapse;
    }

    .game-board td {
        width: 40px;
        height: 40px;
        border: 1px solid #ccc;
        text-align: center;
    }

    .game-board button {
        width: 100%;
        height: 100%;
        background-color: #f5f5f5;
        border: none;
        cursor: pointer;
    }

    .game-board button:hover {
        background-color: #e9e9e9;
    }

</style>

@code {
    string gameCode;
    string playerNameForm;
    string ErrorMessage = "Hello, world!";
    List<Point> selectedPoints = new List<Point>();
    string pointAlphabet = "_ABCDEF";

    bool IsCellSelected(int row, int col)
    {
        Point selectedPoint = new Point { x = row, y = col };
        foreach (Point point in selectedPoints){
            if(point.x == row && point.y == col){
                
                return true;
            };
        }
        return false;
    }

    private void SelectPoint(int row, int col)
    {
        Point selectedPoint = new Point { x = row, y = col };
        selectedPoints.Add(selectedPoint);
    }
    
    private void RemovePoint(int row, int col)
    {
        for (int i = 0; i < selectedPoints.Count; i++)
        {
            Point point = selectedPoints[i];
            
            if (point.x == row && point.y == col)
            {
                selectedPoints.RemoveAt(i);
            }
        }
    }
    private async Task HandleFormSubmit()
    {
        try
        {
            AddPlayerTwo testRequest = new AddPlayerTwo();
            testRequest.playerName = playerNameForm;
            testRequest.tableName = gameCode;
            testRequest.ships = selectedPoints;
            ServiceData response = await BackendApi.AddPlayerTwo(testRequest);
            if (response.StatusCode == 200)
            {
                Navigation.NavigateTo($"/game?game-code={gameCode}&playerName={playerNameForm}&");
            }
            else
            {
                ErrorMessage = "DONE!!!";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}\n\nStack Trace:\n{ex.StackTrace}";
        }
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        gameCode = query["game-code"];
    }
}
